import numpy as np
import matplotlib.pylab as plt
import matplotlib.colors as mcolors


font1 = {'family': 'serif',
        'color':  'black',
        'weight': 'normal',
        'size': 12,
        }

font2 = {'family': 'serif',
        'color':  'red',
        'weight': 'normal',
        'size': 12,
        }

font3 = {'family': 'serif',
        'color':  'black',
        'weight': 'normal',
        'size': 12,
        }


# ---------------------------------------------------------------------------------
# AFM data from Bjorn Sbierski obtained by spin-fRG in the Majorana representation
# ---------------------------------------------------------------------------------

#T_AFM = [0.500000, 0.600000, 0.700000, 0.800000, 0.900000, 1.000000, 1.100000, 1.200000, 1.300000, 1.400000, 1.500000, 1.600000, 1.700000, 1.800000, 1.900000, 2.000000]
#s_AFM = [0.531601, 0.557475, 0.580586, 0.597398, 0.610370, 0.621526, 0.630582, 0.637687, 0.643546, 0.648684, 0.653194, 0.656306, 0.659912, 0.663493, 0.665588, 0.668318]
T_AFM = [0.500000, 0.600000, 0.700000, 0.800000, 0.900000, 1.000000, 1.100000, 1.200000, 1.300000, 1.400000, 1.500000, 1.600000, 1.700000, 1.800000, 1.900000, 2.000000, 2.250000, 2.500000, 2.750000, 3.000000, 3.250000, 3.500000, 3.750000, 4.000000, 4.250000, 4.500000, 4.750000, 5.000000, 5.250000, 5.500000, 5.750000, 6.000000, 6.250000, 6.500000, 6.750000, 7.000000, 7.250000, 7.500000, 7.750000, 8.000000, 8.250000, 8.500000, 8.750000, 9.000000, 9.250000, 9.500000, 9.750000, 10.000000]
s_AFM = [0.531601, 0.557475, 0.580586, 0.597398, 0.610370, 0.621526, 0.630582, 0.637687, 0.643546, 0.648684, 0.653194, 0.656306, 0.659913, 0.663487, 0.665626, 0.668093, 0.672632, 0.675923, 0.678953, 0.680865, 0.682125, 0.683504, 0.684719, 0.685025, 0.686411, 0.687617, 0.687442, 0.688158, 0.688534, 0.688904, 0.689245, 0.689599, 0.689711, 0.690605, 0.690824, 0.690265, 0.691430, 0.690438, 0.689939, 0.691261, 0.691209, 0.691396, 0.691402, 0.692346, 0.692414, 0.691650, 0.691792, 0.691691]

T_AFM = [0.500000, 0.600000, 0.700000, 0.800000, 0.900000, 1.000000, 1.100000, 1.200000, 1.300000, 1.400000, 1.500000, 1.600000, 1.700000, 1.800000, 1.900000, 2.000000, 2.500000, 3.000000, 3.500000, 4.000000, 4.500000, 5.000000, 5.500000, 6.000000, 6.500000, 7.000000, 7.500000, 8.000000, 8.500000, 9.000000, 9.500000, 10.000000]
s_AFM = [0.531601, 0.557475, 0.580586, 0.597398, 0.610370, 0.621526, 0.630582, 0.637687, 0.643546, 0.648684, 0.653194, 0.656306, 0.659913, 0.663485, 0.665635, 0.668040, 0.676067, 0.680716, 0.683447, 0.685585, 0.687019, 0.688067, 0.688924, 0.689507, 0.690253, 0.691116, 0.690599, 0.690602, 0.691412, 0.691957, 0.692161, 0.691361]
DM_AFM = [0.691456, 0.727386, 0.761607, 0.791962, 0.818105, 0.840334, 0.859185, 0.875186, 0.888788, 0.900419, 0.910415, 0.919043, 0.926500, 0.933055, 0.938802, 0.943867, 0.961828, 0.972468, 0.979227, 0.983794, 0.987009, 0.989356, 0.991128, 0.992498, 0.993575, 0.994442, 0.995136, 0.995706, 0.996184, 0.996588, 0.996927, 0.997215]


#T_AFM = [0.500000, 0.520000, 0.540000, 0.560000, 0.580000, 0.600000, 0.620000, 0.640000, 0.660000, 0.680000, 0.700000, 0.720000, 0.740000, 0.760000, 0.780000, 0.800000, 0.820000, 0.840000, 0.860000, 0.880000, 0.900000, 0.920000, 0.940000, 0.960000, 0.980000, 1.000000, 1.100000, 1.200000, 1.300000, 1.400000, 1.500000, 1.600000, 1.700000, 1.800000, 1.900000, 2.000000, 2.500000, 2.750000, 3.000000, 3.250000, 3.500000, 3.750000, 4.000000, 4.250000, 4.500000, 4.750000, 5.000000, 5.250000, 5.500000, 5.750000, 6.000000, 6.250000, 6.500000, 6.750000, 7.000000, 7.250000, 7.500000, 7.750000, 8.000000, 8.250000, 8.500000, 8.750000, 9.000000, 9.250000, 9.500000, 9.750000, 10.000000]
#s_AFM = [0.530844, 0.536159, 0.545133, 0.549944, 0.549006, 0.555868, 0.563885, 0.567601, 0.571956, 0.576127, 0.580182, 0.587417, 0.588113, 0.589242, 0.595500, 0.597491, 0.600629, 0.604774, 0.604018, 0.605881, 0.611182, 0.612950, 0.615299, 0.617484, 0.619612, 0.621600, 0.630569, 0.637690, 0.643545, 0.648684, 0.653194, 0.656306, 0.659913, 0.663483, 0.665644, 0.667988, 0.676964, 0.678953, 0.680865, 0.682125, 0.683504, 0.684719, 0.685025, 0.686411, 0.687617, 0.687442, 0.688158, 0.688534, 0.688904, 0.689245, 0.689599, 0.689711, 0.690605, 0.690824, 0.690265, 0.691430, 0.690438, 0.689939, 0.691261, 0.691209, 0.691396, 0.691402, 0.692346, 0.692414, 0.691650, 0.691792, 0.691691]
#T_AFM = [0.500000, 0.520000, 0.540000, 0.560000, 0.580000, 0.600000, 0.620000, 0.640000, 0.660000, 0.680000, 0.700000, 0.720000, 0.740000, 0.760000, 0.780000, 0.800000, 0.820000, 0.840000, 0.860000, 0.880000, 0.900000, 0.920000, 0.940000, 0.960000, 0.980000, 1.000000, 1.100000, 1.200000, 1.300000, 1.400000, 1.500000, 1.600000, 1.700000, 1.800000, 1.900000, 2.000000, 2.500000]
#DM_AFM = [0.691456, 0.698559, 0.705760, 0.713077, 0.720264, 0.727386, 0.734479, 0.741465, 0.748323, 0.755042, 0.761607, 0.767982, 0.774307, 0.780321, 0.786232, 0.791962, 0.797555, 0.802953, 0.808185, 0.813205, 0.818105, 0.822846, 0.827435, 0.831876, 0.836175, 0.840334, 0.859185, 0.875186, 0.888788, 0.900419, 0.910415, 0.919043, 0.926500, 0.933055, 0.938802, 0.943867, 0.961828]


# ---------------------------------------------------------------------------------
# FM data obtained by QMC (worm algorithm)
# ---------------------------------------------------------------------------------

data = np.loadtxt("./Entropy/L65_Ewald/S.dat")
data2 = np.loadtxt("./Entropy/L33_Ewald/S.dat")
data3 = np.loadtxt("./Entropy/L65/S.dat")


temperature = data[:,0]
entropy = data[:,1]
err_lowT = np.abs(data[:,1] - data2[:,1])
err_highT = np.abs(data[:,1] - data2[:,1])

L = 65
Lsq = L*L
Np = (L * L + 1)//2
Sinf = 0
for i in np.arange(Np+1,Lsq+1):
  Sinf += np.log(i*1.)
for i in np.arange(1,Lsq - Np+1):
  Sinf -= np.log(i*1.)
Sinf /= Lsq

#alpha = -0.0323
alpha = -0.29118118558709694
gamma = 274.625 / L / L

Tc = 1.924
Th = np.where(data == Tc)[0][0] 
print(Th, entropy[Th], entropy[Th+1])



xlow = np.linspace(0.0001, 1.5, 150)
Slow = 5 * gamma / 4. * np.power(xlow, 4.) 
xhigh = np.linspace (2, 20, 180)
Shigh = Sinf + 0.5 * alpha / xhigh / xhigh 

#xdash = np.linspace(0.1, Tc, 20)
xdash = np.linspace(1.6, 2.2, 10)




fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, gridspec_kw={'height_ratios': [3, 2]})

ax1.errorbar(temperature[0:Th+1:4],entropy[0:Th+1:4], yerr = err_lowT[0:Th+1:4], fmt="b.-", label=r"$S_{\rm low \, T}/N$")
ax1.errorbar(temperature[Th+1:-1:4],entropy[Th+1:-1:4], yerr = err_highT[Th+1:-1:4], fmt="bp--", label=r"$S_{\rm high \, T}/N$")
ax1.plot(T_AFM, s_AFM, "gs-", label=r"$S_{\rm AFM}/N$")
ax1.plot(xlow, Slow, "m-", label = "low T")
ax1.plot(xhigh, Shigh, "m--", label = "high T")
ax1.plot(xdash, (entropy[Th] + err_lowT[Th])* np.ones_like(xdash), "k--")
ax1.plot(xdash, (entropy[Th+1] - err_highT[Th+1]) * np.ones_like(xdash), "k--")
#ax1.set_xlabel(r"$T/J$", fontdict=font1)
ax1.set_ylabel(r"$S/N$", fontdict=font1)
ax1.set_xlim([0.3,4])
ax1.set_ylim([0,0.7])
ax1.vlines(x = 1.924, ymin = 0, ymax = 0.59, colors = 'black', linestyles='dashed')
#ax1.vlines(x = 1.754, ymin = 0, ymax = 0.46, colors = 'blue', linestyles='dotted')
#ax1.hlines(y = 0.46,  xmin = 0, xmax = 1.754, colors = 'blue', linestyles='dotted')
#ax1.hlines(y = 0.531601, xmin = 0, xmax = 0.5, colors = 'green', linestyles='dotted')
#ax1.vlines(x = 0.5,  ymin = 0, ymax = 0.531601, colors = 'green', linestyles='dotted')
#ax1.xticks(fontsize=14)
#ax1.yticks(fontsize=14)
ax1.legend(loc="lower right", fontsize=12)
#ax1.set_xscale("log")
#plt.savefig("fig_QMC_entropy_FM_AFM.pdf", format="pdf")



# ---------------------------------------------------------------------------------------
# Variance of the magnetization part
# ---------------------------------------------------------------------------------------


data = np.loadtxt("mz_L33.dat")
datad2 = np.loadtxt("mz_L33_d2.dat")
L = 33
Lsq = L * L
norm = Lsq/4.

#data_obc = np.loadtxt("../../Entropy/L10_OBC/en_L10.dat")
#norm_obc = 25



T_AFM = [0.500000, 0.600000, 0.700000, 0.800000, 0.900000, 1.000000, 1.100000, 1.200000, 1.300000, 1.400000, 1.500000, 1.600000, 1.700000, 1.800000, 1.900000, 2.000000, 2.500000, 3.000000, 3.500000, 4.000000, 4.500000, 5.000000, 5.500000, 6.000000, 6.500000, 7.000000, 7.500000, 8.000000, 8.500000, 9.000000, 9.500000, 10.000000]
DM_AFM = [0.691456, 0.727386, 0.761607, 0.791962, 0.818105, 0.840334, 0.859185, 0.875186, 0.888788, 0.900419, 0.910415, 0.919043, 0.926500, 0.933055, 0.938802, 0.943867, 0.961828, 0.972468, 0.979227, 0.983794, 0.987009, 0.989356, 0.991128, 0.992498, 0.993575, 0.994442, 0.995136, 0.995706, 0.996184, 0.996588, 0.996927, 0.997215]




xs = np.linspace(0, 1.8, 15)

ax2.errorbar(1./data[:,0], data[:,-2]/norm, yerr = data[:,-1]/norm,    fmt = "bo", label=r"FM, L=33, $\delta=0$")
ax2.errorbar(1./datad2[:,0], datad2[:,-2]/norm, yerr = datad2[:,-1]/norm,    fmt = "rx", label=r"FM, L=33, $\delta=2$")
#plt.errorbar(1./data_obc[:,0], data_obc[:,-2]/norm_obc, yerr = data_obc[:,-1]/norm_obc,    fmt = "m.", label="FM, L=10, OBC")
ax2.plot(T_AFM, DM_AFM, "gs-", label="AFM")
ax2.plot(xs, xs*0.33, "r--", label = "0.33T/J")
ax2.plot(xs, xs*0.443,"b--", label = "0.443T/J")
ax2.vlines(x = 1.924, ymin = 0, ymax = 0.9, colors = 'black', linestyles='dashed')
#plt.plot(xs, xs*0.6, "m--", label = "0.6T")
ax2.set_xlabel(r"$T/J$", fontdict=font1)
#plt.ylabel(r"$S^+S^-(x) + h.c. - n_0(\beta)$", fontdict=font1)
ax2.set_ylabel(r"$(\Delta M_z)^2/N$", fontdict=font1)
ax2.set_xlim([0, 4.0])
ax2.set_ylim([0,1])
ax2.legend(loc="best", fontsize=9)
#plt.savefig("fig_Delta_Mz_L33.pdf", format="pdf", bbox_inches="tight")
plt.savefig("fig_QMC_entropy_FM_AFM.pdf", format="pdf", bbox_inches="tight")

